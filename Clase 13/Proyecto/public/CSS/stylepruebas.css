/* Acá nos damos cuenta que la sintaxis que estamos usando es: PARA TODOS LOS ELEMENTOS a
QUE ESTÉN DENTRO DEL BODY, entonces se aplica, pero podemos minimizar hasta la etiqueta padre
más próxima del elemento que estemos interesados de aplicar las reglas de estilo, en este caso
sería la etiqueta <ul>  */
/* 
body a {
    display: block;
} */

/* ul a {
    display: block;
} */

/* Muchas reglas de estilo como width o height sólo se aplican a elementos de bloque,
sería bueno revisar esta información */

/* Cuando utilicemos algúnas propiedades como padding, un elemento de html incrementará
sus dimensiones, por lo cual para evitar ello debemos utilizar la herramienta box-sizing:border-box,
es de valor mencionar que margin no agrega dimensiones al tamaño del elemento */

* {
    box-sizing: border-box;
}

/* Démonos cuenta que el body trae un margen por defecto y debemos aplicar el margin cero si es que
queremos que este ocupe todo el viweport, también nos damos cuenta que si aplicamos un border como
indicador, el contenedor donde estemos trabajando reduce su dimensión debido a que tenemos el
content box sizing en border box*/

/*Podemos notar que he puesto el margen en 0 al inicio, esto es para que el body ocupe todo el viewport
después he hecho un margin auto, esto es para que cuando se sobrepase el max-width, el body quede centrado
con respecto a su contenedor padre que es la etiqueta HTML  */

body {
    margin: 0;
    width: 100 vw;
    border: 2px red solid;
    max-width: 1200px;
    margin: auto;
}


/* Acá podemos ver cómo las reglas de estilo no son pisadas por la regla de título DIV,
creo que debido a que los selectores de clase deben de pesar más en prioridad, sino no entiendo
por qué no son pisadas */
.texto {
    background-color: blue;
}

.container1 {
    background-color: salmon;
}

.container2 {
    background-color: green;
}

/* Si nosotros queremos ocultar con display none, entonces
    HTML no representará a la caja (espacio) que ocupa la etiqueta
    en el body, sin embargo visibility:hidden sí respeta el espacio que
    la caja ocupa, sólo esconde el contenido, por lo que el display
    block al ser renderizado va a ocupar un espacio que no está
    ahí contemplado, el visibility:visible sí va a tener el espacio
    contemplado, por lo que no habrá un problema de que se genera una
    caja ahí porque el espacio ya está asignado (pero no mostrado) */

.oculto {
    visibility: hidden;
    /* display: none; */
}

/* El div no está siendo pisado debido a que usamos selectores de clase.
Tomemos en cuenta algo, si ponemos el width de un elemento (como un div)
cuyo contenedor padre es el body, dependiente del viewport, entonces al
implementar un max-width al body, el elemento div o la etiqueta correspondiente
no respetará el max-width, ya que este será dependiente del viewport y no
de las dimensiones del body, por lo que creo es mejor en esta aplicación el
depender de unidades relativas del body de*/

div {
    width: 90%;
    /* padding: 5%; */
    margin: auto;
    background-color: aqua;
}


@media(min-width:360px) {

    .container1,
    .container2 {
        background-color: yellow;
    }
}

@media(min-width:760px) {

    .container1,
    .container2 {
        background-color: green;
    }
}

@media(min-width:1000px) {

    .container1,
    .container2 {
        background-color: yellow;
    }



    .oculto {
        /* display: block; */
        visibility: visible
    }
}