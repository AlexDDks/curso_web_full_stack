/* Muchas reglas de estilo como width o height sólo se aplican a elementos de bloque,
sería bueno revisar esta información */

/* Cuando utilicemos algúnas propiedades como padding, un elemento de html incrementará
sus dimensiones, por lo cual para evitar ello debemos utilizar la herramienta box-sizing:border-box,
es de valor mencionar que margin no agrega dimensiones al tamaño del elemento, osea con el border-box
el valor del width de un elemento va a ser padding+caja de elemento, mientras que con content-box va 
a ser sólo la caja así que cuando agregamos padding, las dimensiones incrementan del contenedor, mientras
que con border-box, el width de la caja disminuye para que se respete el width que se le asignó al inicio */

* {
    box-sizing: border-box;
}

/* Démonos cuenta que el body trae un margen por defecto y debemos aplicar el margin cero si es que
queremos que este ocupe todo el viweport, también nos damos cuenta que si aplicamos un border como
indicador, el contenedor donde estemos trabajando reduce su dimensión debido a que tenemos el
content box sizing en border box*/

/*Podemos notar que he puesto el margen en 0 al inicio, esto es para que el body ocupe todo el viewport
después he hecho un margin auto, esto es para que cuando se sobrepase el max-width, el body quede centrado
con respecto a su contenedor padre que es la etiqueta HTML  */

body {
    margin: 0;
    width: 100 vw;
    border: 2px red solid;
    max-width: 1200px;
    margin: auto;
}


/* Acá podemos ver cómo las reglas de estilo no son pisadas por la regla de título DIV,
creo que debido a que los selectores de clase deben de pesar más en prioridad, sino no entiendo
por qué no son pisadas */
.texto {
    background-color: blue;
}

.container1 {
    background-color: salmon;
}

.container2 {
    background-color: green;
    font-family: koulen;
}

/* Si nosotros queremos ocultar con display none, entonces
    HTML no representará a la caja (espacio) que ocupa la etiqueta
    en el body, sin embargo visibility:hidden sí respeta el espacio que
    la caja ocupa, sólo esconde el contenido, por lo que el display
    block al ser renderizado va a ocupar un espacio que no está
    ahí contemplado, el visibility:visible sí va a tener el espacio
    contemplado, por lo que no habrá un problema de que se genera una
    caja ahí porque el espacio ya está asignado (pero no mostrado) */

.oculto {
    visibility: hidden;
    /* display: none; */
}

/* El div no está siendo pisado debido a que usamos selectores de clase.
Tomemos en cuenta algo, si ponemos el width de un elemento (como un div)
cuyo contenedor padre es el body, dependiente del viewport, entonces al
implementar un max-width al body, el elemento div o la etiqueta correspondiente
no respetará el max-width, ya que este será dependiente del viewport y no
de las dimensiones del body, por lo que creo es mejor en esta aplicación el
depender de unidades relativas del body de*/

/* Actualización: CSS siempre prioriza los selectores más específicos
para aplicar estilos, por lo que se prioriza el selector de CLASE
o aquella que esté más especificada, por ejemplo en el caso de que tengamos
body section article.... así. Aunque CSS es hojas de estilo en cascada
por lo cual los estilos se leen de arriba para abajo, pero siempre priorizando
los selectores más específicos si es que hay alución a dos elementos HTML */

/* Tambipen se puede usar selectores de id y combinados */

/* h2.subtitulo: esta etiqueta combinada se lee "un elemento h2, con clase subtítulo */
div {
    width: 90%;
    /* padding: 5%; */
    margin: auto;
    background-color: aqua;
}


@media(min-width:360px) {

    .container1,
    .container2 {
        background-color: yellow;
    }
}

@media(min-width:760px) {

    .container1,
    .container2 {
        background-color: green;
    }
}

@media(min-width:1000px) {

    .container1,
    .container2 {
        background-color: yellow;
    }



    .oculto {
        /* display: block; */
        visibility: visible
    }
}